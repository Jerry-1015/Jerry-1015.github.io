<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>04目录和文件操作2</title>
    <url>/2022/05/03/04%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C2/</url>
    <content><![CDATA[<h5 id="cat-命令">cat 命令</h5>
<blockquote>
<p>查看文件内容、读终端</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> hello.cc // 查看文件内容</span><br><span class="line"><span class="built_in">cat</span> // 回显终端</span><br><span class="line"><span class="built_in">tac</span> hello.cc // 文件内容倒着显示</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/03/hfjvTVn5ZMCkqaJ.png" /></p>
<h5 id="more-less命令">more less命令</h5>
<blockquote>
<p>分屏显示 空格翻页，回车一行，退出用q</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more stdio.h</span><br><span class="line">less stdio.h</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/04/G7SFDYOXKRAdWnj.png" /></p>
<h5 id="head-tail-命令">head tail 命令</h5>
<blockquote>
<p>显示默认前10行、显示默认后10行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> stdio.h</span><br><span class="line"><span class="built_in">head</span> -5 stdio.h</span><br><span class="line"><span class="built_in">tail</span> -15 stdio.h</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/04/IeGijw3v4OV5yKa.png" /></p>
<h5 id="tree-命令">tree 命令</h5>
<blockquote>
<p>以树状形式显示文件</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/05/04/nUZvuWgPehkCTwp.png" /></p>
<h5 id="wc-命令">wc 命令</h5>
<blockquote>
<p>计算文件的byte数，字数，或是列数</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> -c hello.cc // 只显示byte数</span><br><span class="line"><span class="built_in">wc</span> -l hello.cc // 只显示列数</span><br><span class="line"><span class="built_in">wc</span> -w hello.cc // 只显示字数</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/04/Ih1mjx6MvWRUw8N.png" /></p>
<h5 id="od-命令">od 命令</h5>
<blockquote>
<p>查看当前文件的不同数据的显示</p>
</blockquote>
<h5 id="du-df-命令">du df 命令</h5>
<blockquote>
<p>du： 显示某个目录大小； df：查看磁盘剩余空间</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>03目录和文件操作1</title>
    <url>/2022/05/02/03%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C1/</url>
    <content><![CDATA[<h5 id="相对路径和绝对路径">相对路径和绝对路径</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./home // 当前目录下的home</span><br><span class="line"><span class="built_in">cd</span> .. // 返回上一级</span><br><span class="line"><span class="built_in">cd</span> - // 切回上一个工作目录</span><br><span class="line"><span class="built_in">cd</span> ~ // 进入家目录</span><br></pre></td></tr></table></figure>
<h5 id="ls-命令">ls 命令</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l // 显示详细信息</span><br><span class="line"><span class="built_in">ls</span> -a // 显示隐藏文件</span><br><span class="line"><span class="built_in">ls</span> -d // 显示目录</span><br><span class="line"><span class="built_in">ls</span> -l <span class="built_in">dir</span> // 显示 <span class="built_in">dir</span> 目录下的文件的详细信息</span><br><span class="line"><span class="built_in">ls</span> -dl <span class="built_in">dir</span> // 显示 <span class="built_in">dir</span> 的详细信息</span><br><span class="line"><span class="built_in">ls</span> -r // 递归，向下显示目录</span><br><span class="line"><span class="built_in">ls</span> -R // 递归，向下显示目录, 大小 r 有区别</span><br></pre></td></tr></table></figure>
<h5 id="linux系统文件类型">linux系统文件类型</h5>
<ul>
<li>普通文件：-</li>
<li>目录文件：d</li>
<li>字符设备文件：c</li>
<li>块设备文件：b</li>
<li>软链接：l</li>
<li>管道文件：p</li>
<li>套接字：s</li>
<li>未知文件</li>
</ul>
<h5 id="which-命令">which 命令</h5>
<blockquote>
<p>查看指定命令所在路径</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">which</span> data</span><br></pre></td></tr></table></figure>
<h5 id="pwd-命令">pwd 命令</h5>
<blockquote>
<p>查看当前所在路径</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<h5 id="mkdir-命令">mkdir 命令</h5>
<blockquote>
<p>创建目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir1 dir2 // 一次创建多个目录</span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span>/dir1/dir2 // 连同父目录一同创建</span><br></pre></td></tr></table></figure>
<h5 id="rmdir-命令">rmdir 命令</h5>
<blockquote>
<p>删除空目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> dir1</span><br><span class="line"><span class="built_in">rmdir</span> -p a/b // 连同空的父目录一起删除</span><br></pre></td></tr></table></figure>
<h5 id="touch-命令">touch 命令</h5>
<blockquote>
<p>创建空文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> hello.c</span><br></pre></td></tr></table></figure>
<h5 id="rm-命令">rm 命令</h5>
<blockquote>
<p>删除文件、目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> file // 删除文件</span><br><span class="line"><span class="built_in">rm</span> <span class="built_in">dir</span> -rf // 删除目录 f：强制删除</span><br></pre></td></tr></table></figure>
<h5 id="mv-命令">mv 命令</h5>
<blockquote>
<p>移动文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> <span class="built_in">source</span> destination </span><br></pre></td></tr></table></figure>
<h5 id="cp-命令">cp 命令</h5>
<blockquote>
<p>拷贝文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> hello.c <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">cp</span> hello.c hello.cpp // 用hello.c 创建 hello.cpp</span><br><span class="line"><span class="built_in">cp</span> hello.* <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">cp</span> <span class="built_in">dir</span> .. // 显示 路过目录<span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="built_in">cp</span> <span class="built_in">dir</span> -a <span class="built_in">dir</span> .. // 全部拷贝 包括文件属性 时间、权限等</span><br><span class="line"><span class="built_in">cp</span> <span class="built_in">dir</span> -r <span class="built_in">dir</span> .. // </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>02类Unix系统目录</title>
    <url>/2022/05/02/02%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p>Linux系统中 "所见皆文件"</p>
<p>bin: 存放二进制可执行文件</p>
<p>boot: 存放开机启动程序，相当于Windows的服务</p>
<p>dev: 存放设备文件: 字符设备、块设备</p>
<p>home: 存放用户</p>
<p>etc: 用户信息和系统配置文件</p>
<p>lib: 库文件：lib.so.6</p>
<p>root: 管理员宿主目录</p>
<p>usr: 用户资源管理目录</p>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>05软链接和硬链接</title>
    <url>/2022/05/04/05%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h5 id="ln-命令">ln 命令</h5>
<blockquote>
<p>创建链接</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s file file.s</span><br><span class="line"><span class="built_in">ln</span> -s ./file file.soft</span><br></pre></td></tr></table></figure>
<p><strong>软链接功能相当于Windows下的快捷方式</strong></p>
<ol type="1">
<li><p>file.s 文件的大小为4个字节 4个字节的内容为file的访问路径 <img
src="https://s2.loli.net/2022/05/04/E7AcoanMZeRvLj8.png" /></p></li>
<li><p>file.soft 文件的大小为6个字节 因为利用 <code>./</code> +
文件名方式创建，所以有差异 <img
src="https://s2.loli.net/2022/05/04/nWATK2EqVzspClM.png" /></p></li>
<li><p>利用相对路径创建的软链接，移动到别的目录下不能正确执行，若想顺利执行，需要使用绝对路径</p></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /home/jerry/file file.s2</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>为保证软链接可以任意搬移，创建时务必使用绝对路径</li>
<li>软链接的权限全开放，代表软链接本身的权限，不是文件的权限</li>
</ol>
<p><strong>硬链接对任意一个文件进行修改，其他文件都会发生变化</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> file file.h</span><br><span class="line"><span class="built_in">ln</span> file file.hard</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>如何实现？</li>
<li>Inode实现：给每个文件赋一个数</li>
<li>三个文件有相同的Inode</li>
<li>当操作任意一个文件时，都是操作同一个Inode的文件</li>
<li>删除的时候怎么办？都删？实际上并不是</li>
<li>而是并没有真正删除，只是把硬链接计数减一，当硬链接计数为0时，才真正删除文件</li>
<li>操作系统给每一个文件赋予唯一的Inode，当有相同Inode文件存在时，彼此同步。</li>
<li>删除时，只将硬链接计数减一， 减为0时，Inode释放</li>
</ol>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>06创建修改用户和用户组</title>
    <url>/2022/05/04/06%E5%88%9B%E5%BB%BA%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/</url>
    <content><![CDATA[<h5 id="whoami-命令">whoami 命令</h5>
<blockquote>
<p>查看当前用户</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/04/OCRfrmtYsBq4DA5.png" /></p>
<div class="note "><h5 id="chmod-命令">chmod 命令</h5>
<ul>
<li>chmod [who][+|-|=][mode] 文件名</li>
<li>[who]:</li>
<li>u 表示用户(user), 即文件或目录所有者</li>
<li>g 表示同组(group)用户， 即与文件属组有相同组ID的所有用户</li>
<li>o 表示其他(others)用户</li>
<li>a 表示所有(all)用户，它是系统默认值 数字设定：r: 4; w: 2; x:
1。</li>
</ul>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x hello.cc</span><br><span class="line"><span class="built_in">chmod</span> g-r hello.cc</span><br><span class="line"><span class="built_in">chmod</span> o+w hello.cc</span><br><span class="line"><span class="built_in">chmod</span> a+r hello.cc</span><br><span class="line"><span class="built_in">chmod</span> 471 hello.cc</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/04/3tgyU2rDCRTbWA8.png" /></p>
<h5 id="chown-命令">chown 命令</h5>
<blockquote>
<p>修改文件或目录的所有者或所属组</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> wangwu hello.cc</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/04/xgOX1HhsraEK3CD.png" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> g88 hello.cc</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/04/DheubWI6CSR975l.png" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> nobody:nogroup hello.cc</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/05/05/Yf45k8iA6WlnyP3.png" /></p>
<h5 id="adduser-addgroup-命令">adduser addgroup 命令</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser wangwu</span><br><span class="line">sudo addgroup g88</span><br></pre></td></tr></table></figure>
<h5 id="deluser-delgroup-命令">deluser delgroup 命令</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deluser wangwu</span><br><span class="line">delgroup g88</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>07查找与检索</title>
    <url>/2022/05/05/07%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<div class="note primary no-icon"><h5 id="find-命令">find 命令</h5>
<p><code>查找文件</code></p>
<ul>
<li>-type           按文件类型搜索 d/p/s/c/b/l/f</li>
<li>-name         按文件名搜索</li>
<li>-maxdepth  指定搜索深度</li>
<li>-size            按文件大小搜索，单位 k, M, G</li>
<li>-atime          按 access 的时间</li>
<li>-mtime         按 modify 的时间</li>
<li>-ctime          按 change 的时间</li>
<li>-exec           将 find 搜索的执行结果集执行某一指定命令</li>
<li>-ok               以交互式的方式将 find
搜索的执行结果集执行某一指定命令</li>
<li>xargs           将 find
搜索的执行结果集执行某一指定命令,当结果集数量较大时，可以分片映射。</li>
<li>-print0                find /usr/ -name '<em>tmp</em>' | xargs -0 ls
-ld</li>
</ul>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find ./ -<span class="built_in">type</span> <span class="string">&#x27;l&#x27;</span></span><br><span class="line">find ./ -name <span class="string">&#x27;*.cc&#x27;</span></span><br><span class="line">find ./ -maxdepth 1 -name <span class="string">&#x27;*.cc&#x27;</span>  // 参数有顺序要求</span><br><span class="line">find ./ -size +20m -size -50m</span><br><span class="line">find ./ -ctime 1</span><br><span class="line">find /usr/ -name <span class="string">&quot;*tmp*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br><span class="line">find /usr/ -name <span class="string">&quot;*tmp*&quot;</span> -ok <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="grep-命令">grep 命令</h5>
<p><code>找文件内容</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r <span class="string">&#x27;include&#x27;</span> ./ -n</span><br><span class="line">ps aux | grep <span class="string">&#x27;cupad&#x27;</span> // 若结果只有一条，那就是只有grep自身, 检索进程结果集</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="ps-命令">ps 命令</h5>
<p><code>查看进程</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>08安装卸载、压缩解压软件</title>
    <url>/2022/05/06/08%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E3%80%81%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<div class="note primary no-icon"><h5 id="apt-get-命令">apt-get 命令</h5>
<p><code>安装、卸载</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update // 更新</span><br><span class="line">pt-get install 软件名</span><br><span class="line">apt-get remove 软件名 // 卸载</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="deb包安装">deb包安装</h5>
<p><code>安装、卸载</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i xxx.deb // 安装deb包</span><br><span class="line">dpkg -r xxx.deb // 卸载deb包</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="源码安装">源码安装</h5>
<ol type="1">
<li>解压缩源代码包</li>
<li>cd dir</li>
<li>./configure //检测文件是否缺失，创建Makefile，检测编译环境</li>
<li>make // 编译源码，生成库和可执行程序</li>
<li>sudo make install // 把库和可执行程序，安装到系统路径下</li>
<li>sudo distclean // 删除和卸载软件</li>
</ol>
</div>
<div class="note primary no-icon"><h5 id="tar-命令">tar 命令</h5>
<p><code>tar打包</code> <br> <code>gzip压缩</code>： 只能压缩一个文件
<br> <code>bzip压缩</code>: 只能压缩一个文件</p>
<ul>
<li>z：用gzip压缩</li>
<li>c: create</li>
<li>v: 显示压缩过程</li>
<li>f: file</li>
<li>j：用bzip2压缩</li>
<li>x: 解压</li>
</ul>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zcvf 要生成的压缩包名 压缩材料 </span><br><span class="line">tar -zxvf 压缩包名 </span><br><span class="line"></span><br><span class="line">tar zcvf test.tar.gz file1 dir2 使用gzip方式压缩</span><br><span class="line">tar jcvf test.tar.gz file1 dir2 使用bzip2方式压缩</span><br><span class="line"></span><br><span class="line">tar zxvf test.tar.gz 使用gzip方式解压</span><br><span class="line">tar jxvf test.tar.gz 使用bzip方式解压</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="rar-unrar-命令">rar unrar 命令</h5>
<p><code>压缩解压</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rar a -r test.rar hello.cc stdio.h</span><br><span class="line">unrar x test.rar</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="zip-unzip-命令">zip unzip 命令</h5>
<p><code>压缩解压</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip -r test.zip hello.cc stdio.h</span><br><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>09其他命令</title>
    <url>/2022/05/09/09%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<div class="note primary no-icon"><h5 id="who-命令">who 命令</h5>
</div>
<div class="note primary no-icon"><h5 id="jobs-命令">jobs 命令</h5>
<p><code>显示当前shell下正在运行哪些作业(即后台作业)</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span></span><br><span class="line"><span class="built_in">cat</span> &amp;</span><br><span class="line"><span class="built_in">jobs</span></span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="fg-bg-命令">fg bg 命令</h5>
<p><code>前后台切换</code></p>
</div>
<div class="note primary no-icon"><h5 id="kill-命令">kill 命令</h5>
</div>
<div class="note primary no-icon"><h5 id="env-命令">env 命令</h5>
<p><code>查看环境变量</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> $<span class="variable">$shell</span></span><br><span class="line"><span class="built_in">env</span> </span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="top-命令">top 命令</h5>
<p><code>文字版任务管理器</code></p>
</div>
<div class="note primary no-icon"><h5 id="passwd-命令">passwd 命令</h5>
<p><code>设置密码</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd zhangshan</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="ifconfig-命令">ifconfig 命令</h5>
</div>
<div class="note primary no-icon"><h5 id="man-命令">man 命令</h5>
<p><code>查看手册</code></p>
</div>
<div class="note primary no-icon"><h5 id="clear-命令">clear 命令</h5>
<p><code>清屏</code></p>
</div>
<div class="note primary no-icon"><h5 id="alias-命令">alias 命令</h5>
<p><code>起别名</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> pg = <span class="string">&#x27;ps aux | gerp&#x27;</span></span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><h5 id="umask-命令">umask 命令</h5>
<p><code>掩码</code></p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">umask</span> 511</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>11静态库和共享库</title>
    <url>/2022/05/10/11%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%85%B1%E4%BA%AB%E5%BA%93/</url>
    <content><![CDATA[<div class="note info no-icon"><h5 id="程序库">程序库</h5>
<pre><code>所谓&quot;程序库&quot;，简单说，就是包含了数据和执行码的文件。其不能单独执行，可以作为其它执行程序的一部分来完成某些功能。
库的存在，可以使得程序模块化，可以加快程序的再编译，可以实现代码重用，可以使得程序便于升级。 
程序库可分为静态库(static library)和共享库(shared object)。</code></pre>
</div>
<div class="note primary no-icon"><h5 id="静态库与动态库">静态库与动态库</h5>
<ol type="1">
<li>对空间要求较低，而对时间要求较高的核心程序中。</li>
<li>对时间要求较低，而对空间要求较高。</li>
</ol>
</div>
<div class="note primary no-icon"><h5 id="制作使用静态库">制作、使用静态库</h5>
<p><code>ar rcs libmylib.a file.o</code></p>
<ol type="1">
<li>将.c生成.o文件 <code>gcc -c add.c -o add.o</code></li>
<li>使用 ar 工具制作静态库 <code>ar rcs lib库名.a add.c</code></li>
<li>编译静态库到可执行文件中,
<code>gcc test.c libmymath.a -o test</code></li>
</ol>
</div>
<div class="note primary no-icon"><h5 id="隐式声明">隐式声明</h5>
<p>当编译器在编译时，碰到函数调用之前，没有发现函数定义及函数声明，编译器会帮我们进行隐式声明。</br>
但编译器的隐式声明的返回值是 int 类型，因此若你的声明的返回值不是 int
类型，则会报错。</br> 解决方法：<br />
1. 在cpp文件中添加函数原型<br />
2. 静态库编写者写头文件</p>
</div>
<div class="note primary no-icon"><h5 id="头文件守卫">头文件守卫</h5>
<p><code>防止头文件被重复包含</code> <br> #ifndef <em>HEAD_H</em> <br>
#define <em>HEAD_H</em> <br> ...... <br> #endif <br></p>
</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mymath.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MYMATH_H_ </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MYMATH_H_ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">div1</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> inc</span><br><span class="line"><span class="built_in">mkdir</span> lib</span><br><span class="line"><span class="built_in">mv</span> *.h inc/</span><br><span class="line"><span class="built_in">mv</span> *.a lib/</span><br><span class="line">gcc test.c ./lib/libmymath.a -o a.out -I ./inc</span><br><span class="line">./a.out </span><br></pre></td></tr></table></figure>
<div class="note primary"><h5 id="动态库制作及使用">动态库制作及使用</h5>
<ol type="1">
<li>将.c 生成.o 文件， (生成与位置无关的代码 -fPIC)
<code>gcc -c add.c -o add.o -fPIC</code></li>
<li>使用gcc -shared 制作动态库 `gcc -shared -o lib库名.so add.o sub.o
div.o</li>
<li>编译可执行程序时，指定所使用的动态库。 <code>-l: 指定库名</code>
<code>-L：指定库路径</code>
<code>gcc test.c -o a.out -lmymath -L./lib</code></li>
<li>运行可执行程序 ./a.out 出错</li>
</ol>
<ul>
<li>原因：
<ul>
<li>链接器: 工作于链接阶段, 工作时需要 -l -L 支持</li>
<li>动态链接器: 工作于程序运行阶段,
工作时需要提供动态库所在目录位置。</li>
<li>解决方法：</li>
</ul>
<ol type="1">
<li>通过环境变量, <code>export LD_LIBRARY_PATH=动态库路径</code> ./a.out
成功 (临时生效，终端重启环境变量失效)</li>
<li>永久生效 写入终端配置文件。 <code>.bashrc</code>
建议使用绝对路径</li>
</ol>
<ul>
<li>vim ~/.bashrc</li>
<li>写入 export LD_LIBARARY_PATH=动态库路径 保存</li>
<li>. .bashrc/ sorce .bashrc / 重启终端 ---&gt; 让修改后的 .bashrc
生效</li>
<li>./a.out 成功</li>
</ul>
<ol start="3" type="1">
<li>拷贝自定义动态库到 /lib (标准C库所在目录位置)</li>
<li>配置文件法
<ul>
<li>vi /etc/ld.so.conf 添加路径</li>
<li>sudo vi /etc/ld.so.cnf</li>
<li>sudo ldconfig -v</li>
</ul></li>
</ol></li>
</ul>
</div>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>静态库和共享库</tag>
      </tags>
  </entry>
  <entry>
    <title>10gcc编译步骤</title>
    <url>/2022/05/09/10gcc%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<div class="note primary no-icon"><h5 id="gcc编译4步骤">gcc编译4步骤</h5>
<ol type="1">
<li>预处理：<code>gcc -E</code> hello.c -&gt; hello.i
<ol type="1">
<li>展开宏，头文件</li>
<li>替换条件编译</li>
<li>删除注释、空行、空白</li>
</ol></li>
<li>编译: <code>gcc -S</code> hello.i -&gt; hello.s
<ol type="1">
<li>检查语法规范</li>
<li>消耗时间、系统资源最多</li>
</ol></li>
<li>汇编: <code>gcc -c</code> hello.s -&gt; hello.o
<ol type="1">
<li>将汇编指令翻译成机器指令</li>
</ol></li>
<li>链接
<ol type="1">
<li>数据段合并</li>
<li>地址回填</li>
</ol></li>
</ol>
</div>
<div class="note primary no-icon"><h5 id="gcc-参数">gcc 参数</h5>
<ul>
<li>-I: 指定头文件路径</li>
<li>-c: 预处理、编译、汇编。得到二进制文件</li>
<li>-g: 编译时添加调试语句。主要支持gdb调试</li>
<li>On: n=0~3 编译优化，n越大优化得越多</li>
<li>Wall: 提示所有警告信息</li>
<li>D: 向程序中"动态"注册宏</li>
</ul>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -I ./inc hello.c -o hello</span><br><span class="line">gcc hello.c -o hello1</span><br><span class="line">gcc hello.c -o hello2 -g</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>gcc编译</tag>
      </tags>
  </entry>
  <entry>
    <title>BP神经网络</title>
    <url>/2022/05/01/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="bp神经网络算法">BP神经网络算法</h1>
<h4 id="算法原理">1. 算法原理</h4>
<h5 id="概述">1.1 概述</h5>
<p>​ <strong>人工神经网络</strong>无需事先确定输入输出之间<a
href="">映射关系</a>的数学方程，仅通过自身的训练，学习某种规则，在给定输入值时得到最接近期望输出值的结果。作为一种智能信息处理系统，人工神经网络实现其功能的核心是算法。BP神经网络是一种按==误差反向传播==(简称误差反传)训练的多层前馈网络，其算法称为<a
href="https://baike.baidu.com/item/BP算法">BP算法</a>，它的基本思想是==梯度下降法==，利用梯度搜索技术，以期使网络的实际输出值和期望输出值的误差均方差为最小。<br>
​ <strong>BP神经网络的计算过程</strong>由<a href="">正向计算过程</a>和<a
href="">反向计算过程</a>组成。正向传播过程，输入模式从输入层经隐单元层逐层处理，并转向输出层，每一层神经元的状态只影响下一层神经元的状态。如果在输出层不能得到期望的输出，则转入反向传播，将误差信号沿原来的连接通路返回，通过修改各神经元的权值，使得误差信号最小。</p>
<h5 id="算法分析">1.2 算法分析</h5>
<p><strong>多层神经网络结构</strong>：</p>
<p><img src="https://s2.loli.net/2022/05/01/tv5mA6lQ3fjWdIJ.png" style="zoom: 50%;" /></p>
<p>通常一个多层神经网络由<span
class="math inline">\(L\)</span>​​层神经元组成，第一层称作==输入层==，最后一层称作==输出层==，中间层为==隐含层==。</p>
<p>多层神经网络的基本组成元素是神经元，单个神经元的模型如下：</p>
<p><img src="https://s2.loli.net/2022/05/01/bvtRcPUYwxQ8A9O.png" alt="image-20210803202615457" style="zoom:50%;" /></p>
<p>输入层输入向量:<span
class="math inline">\(X=(x_1,x_2,...，x_i,...,x_m);\)</span>​</p>
<p>第<span class="math inline">\(l\)</span>​​​​​层的隐含层向量：<span
class="math inline">\(H^l=(h_1^l,h_2^l,...,h_j^l,...,h_{s_l}^l)
(l=2,3,...,L-1,j=1,2,...,s_l);\)</span>​​​​</p>
<p>输出层输出向量：<span
class="math inline">\(Y=(y_1,y_2,...,y_k,...,y_n);\)</span>​</p>
<p>设<span class="math inline">\(w_{ij}^l\)</span>为从第<span
class="math inline">\(l-1\)</span>层的第<span
class="math inline">\(i\)</span>个神经元与第<span
class="math inline">\(l\)</span>层的第<span
class="math inline">\(j\)</span>​个神经元之间的连接权重，<span
class="math inline">\(b_j^l\)</span>为第<span
class="math inline">\(l\)</span>层第<span
class="math inline">\(j\)</span>​个神经元的偏置。</p>
<p>因此得到：</p>
<p><span class="math display">\[
\begin{align}
  h_j^l &amp;=f(net_j^l) \nonumber \\
  net_j^l &amp;=\sum_{j=1}^{s_{l-1}}{w_{ij}^l+b_j^l} \nonumber
\end{align}
\]</span></p>
<p>其中<span class="math inline">\(net_j^l\)</span>为第<span
class="math inline">\(l\)</span>层第<span
class="math inline">\(j\)</span>个神经元的输入，<span
class="math inline">\(f(\cdot)\)</span>​为激活函数。</p>
<p><strong>激活函数</strong>：</p>
<blockquote>
<p>作用：引入非线性因素，使得模型能够较好地逼近非线性函数。</p>
</blockquote>
<p>BP神经网络算法常用的激活函数：</p>
<ul>
<li><p>Sigmod函数： <span class="math display">\[
f(x)=\frac{1}{1+e^x}
\]</span>
<img src="https://s2.loli.net/2022/05/01/gNu3h27ljwTPb6i.png" alt="image-20210804000024960" style="zoom: 15%;" /></p></li>
<li><p>Tanh函数（双曲正切函数） <span class="math display">\[
f(x)=\frac{e^x-e^{-x}}{e^x+e^{-x}}
\]</span></p>
<p><img src="https://s2.loli.net/2022/05/01/c6aAzTXWSi5V1hj.png" alt="image-20210804001057704" style="zoom:15%;" /></p>
<p><strong>偏置</strong>：</p>
<blockquote>
<p>作用：可以理解为加入一个与输入<span
class="math inline">\(X\)</span>无关的常数项，使得逼近的效果更好。</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/05/01/x7pbY5DIjO9AfNh.png" alt="img" style="zoom:50%;" /></p>
<p>如果用<span
class="math inline">\(y=x\)</span>​​​去逼近，效果不如人意，相反如果加入一个常数项，使得<span
class="math inline">\(y=x+2\)</span>​，效果则会好很多。</p>
<p><img src="https://s2.loli.net/2022/05/01/FUqSAPzNbrQIdvi.png" alt="img" style="zoom:50%;" /></p>
<p><strong>误差函数</strong>:</p>
<blockquote>
<p>作用：衡量输出结果与期望输出的差距</p>
</blockquote>
<p>假设有<span class="math inline">\(p\)</span>​个训练样本<span
class="math inline">\(\{(x(1),y(1)),(x(2),y(2)),...,(x(p),y(p))\}\)</span>​,<span
class="math inline">\(d(i)\)</span>​为对应<span
class="math inline">\(x(i)\)</span>​的期望输出，假设单个训练样本有<span
class="math inline">\(n\)</span>​个输出。定义误差函数： <span
class="math display">\[
E=\frac{1}{p}\sum_{i=1}^p{E(i)}
\]</span> 其中<span
class="math inline">\(E(i)\)</span>为单个样本的训练误差： <span
class="math display">\[
E(i)=\frac{1}{2}\sum_{k=1}^n(d_k(i)-y_k(i))^2
\]</span> 因此全局误差函数： <span class="math display">\[
E=\frac{1}{2p}\sum_{i=1}^p\sum_{k=1}^n{(d_k(i)-y_k(i))^2}
\]</span></p>
<p><strong>如何更新权重与偏置</strong>：</p>
<blockquote>
<p>误差反向传播更新权重与偏置</p>
</blockquote>
<p>一般采用梯度下降法更新权重与偏置： <span class="math display">\[
w_{ij}^l=w_{ij}^l-\alpha \frac{\partial E}{\partial w_{ij}^l} \\
b_{j}^l=b_j^l-\alpha \frac{\partial E}{\partial b_j^l}
\]</span></p>
<p>其中$<span
class="math inline">\(​为学习速率，\)</span>(0,1)$​​。BP神经网络算法关键就在与如何求解上述两个偏导数，具体推导比较繁杂，这里就不在叙述，相关参考将附在文末<a
href="#第二种跳转"><sup>2</sup></a>。</p></li>
</ul>
<h5 id="回顾">1.3 回顾</h5>
<p>最后我们再通过一个示意图，回顾BP神经网络算法的整个流程。</p>
<p><img src="https://s2.loli.net/2022/05/01/wIgxHEAbeLjPBmN.png" alt="image-20210804155659704" style="zoom: 67%;" /></p>
<h5 id="优劣势">1.4 优劣势</h5>
<p><strong>优势</strong>：</p>
<p>主要用于以下四个方面：</p>
<ul>
<li>函数逼近</li>
<li>模式识别</li>
<li>分类</li>
<li>数据压缩</li>
</ul>
<p><strong>劣势</strong>：</p>
<ul>
<li>学习速度慢，需要多次学习才能收敛</li>
<li>采用梯度下降法，容易陷入局部最小值</li>
<li>网络层数、神经元个数的选取没有理论指导，主要凭借经验</li>
<li>网络推广能力有限</li>
</ul>
<h4 id="matlab实现">2. Matlab实现</h4>
<h5 id="算法实现步骤">2.1 算法实现步骤</h5>
<ol type="1">
<li><p>进行数据预处理</p></li>
<li><p>建立BP神经网络模型</p></li>
<li><p>利用样本进行训练</p></li>
<li><p>返回训练结束的模型</p></li>
</ol>
<h5 id="案例">2.2 案例</h5>
<p>​
在建立BP神经网络模型以及训练（即更新权重与偏置）Matlab有自带的函数，在实现BP神经网络算法的时候，我们直接调用这些函数就可以。</p>
<p>​
为了能够更清晰地了解算法的实现过程，这里选取比较简单的数据进行演示。</p>
<p><strong>案例一</strong>：曲线拟合</p>
<p>题目：创建BP神经网络</p>
<p>输入向量 <span
class="math inline">\(P=[0,1,2,3,4,5,6,7,8,9,10];\)</span></p>
<p>期望输出 <span
class="math inline">\(T=[0,1,2,3,4,3,2,1,2,3,4];\)</span></p>
<p>散点图如下：</p>
<p><img src="https://s2.loli.net/2022/05/01/t15rSj4P9Ibzulw.png" alt="img" style="zoom:50%;" /></p>
<p>试用BP神经网络算法对上图进行拟合，并将拟合效果绘图展示。</p>
<p><strong>Matlab代码</strong>：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all; clearvars; clear; <span class="comment">%清空工作环境</span></span><br><span class="line">P = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line">T = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">%由于feedforwardnet函数自动对样本进行归一化和划分训练、验证、测试集,</span></span><br><span class="line"><span class="comment">%所以就不用手动将数据进行归一化处理，但不知道有没有打乱顺序</span></span><br><span class="line"><span class="comment">% n=size(P,2); temp=randperm(n); P_train=P(temp(1:8));</span></span><br><span class="line"><span class="comment">% T_train=T(temp(1:8)); P_test=P(temp(9:end)); T_test=T(temp(9:end));</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% [p_train,p_input]=mapminmax(P_train,0,1);</span></span><br><span class="line"><span class="comment">% [t_train,t_output]=mapminmax(T_train,0,1);</span></span><br><span class="line"><span class="comment">% p_test=mapminmax(P_test,p_input);</span></span><br><span class="line">net = feedforwardnet(<span class="number">5</span>, <span class="string">&#x27;traingd&#x27;</span>); </span><br><span class="line"><span class="comment">%是&#x27;5&#x27;是指隐含层有5个神经元，这里只有一个隐含层，多个隐含层神经元的个数设置为[5,3,...]</span></span><br><span class="line"></span><br><span class="line">net.trainParam.lr = <span class="number">0.01</span>; <span class="comment">%学习速率</span></span><br><span class="line">net.trainParam.epochs = <span class="number">10000</span>; <span class="comment">%最大训练次数</span></span><br><span class="line">net.trainParam.goal = <span class="number">1e-6</span>; <span class="comment">%最小误差，达到该精度，停止训练</span></span><br><span class="line">net.trainParam.show = <span class="number">50</span>; <span class="comment">%每50次展示训练结果</span></span><br><span class="line">net = train(net, P, T); <span class="comment">%训练</span></span><br><span class="line">Y = net(P); <span class="comment">%输出</span></span><br><span class="line">perf = perform(net, Y, T);<span class="comment">%误差</span></span><br><span class="line"><span class="built_in">plot</span>(P, T, P, Y, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>结果还不错的几个图</strong>：</p>
<p><img src="https://s2.loli.net/2022/05/01/6jYC8JGF3tHpurM.png" style="zoom:45%;" /></p>
<p><img src="https://s2.loli.net/2022/05/01/gkDKQJurA8mPq4X.png" alt="2" style="zoom:45%;" /></p>
<p><img src="https://s2.loli.net/2022/05/01/xDOQSFgGa8sjXVh.png" alt="3" style="zoom:45%;" />
<img src="https://s2.loli.net/2022/05/01/bmi67HagVJpDzKd.png" alt="4" style="zoom:45%;" /></p>
<p>由于训练的样本太少，所以结果不是很令人满意。</p>
<p><strong>案例二</strong>：蠓虫分类</p>
<p>题目：依据的资料是触角和翅膀的长度，已经测得了9 支Af 和6 支Apf
的数据如下： Af:
(1.24,1.72)，(1.36,1.74)，(1.38,1.64)，(1.38,1.82)，(1.38,1.90)，(1.40,1.70)，
(1.48,1.82)，(1.54,1.82)，(1.56,2.08). Apf:
(1.14,1.78)，(1.18,1.96)，(1.20,1.86)，(1.26,2.00)，(1.28,2.00)，(1.30,1.96).</p>
<p>试对触角和翼长分别为(1.24,1.80)，(1.28,1.84)与(1.40,2.04)的3
个标本加以识别。</p>
<p><strong>Matlab代码</strong>：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clearvars; close all; <span class="comment">%清空工作环境</span></span><br><span class="line"><span class="comment">%导入数据，第一列为触角长度，第二列为翅膀长度</span></span><br><span class="line">x_1 = [<span class="number">1.24</span>, <span class="number">1.72</span>; <span class="number">1.36</span>, <span class="number">1.74</span>; <span class="number">1.38</span>, <span class="number">1.64</span>; <span class="number">1.38</span>, <span class="number">1.82</span>;</span><br><span class="line">    <span class="number">1.38</span>, <span class="number">1.90</span>; <span class="number">1.40</span>, <span class="number">1.70</span>; <span class="number">1.48</span>, <span class="number">1.82</span>; <span class="number">1.54</span>, <span class="number">1.82</span>; <span class="number">1.56</span>, <span class="number">2.08</span>]; <span class="comment">%Af蠓虫</span></span><br><span class="line">x_2 = [<span class="number">1.14</span>, <span class="number">1.78</span>; <span class="number">1.18</span>, <span class="number">1.96</span>; <span class="number">1.20</span>, <span class="number">1.86</span>; <span class="number">1.26</span>, <span class="number">2.00</span>; <span class="number">1.28</span>, <span class="number">2.00</span>;</span><br><span class="line">    <span class="number">1.30</span>, <span class="number">1.96</span>]; <span class="comment">%Apf蠓虫</span></span><br><span class="line">x = [x_1; x_2]&#x27;; <span class="comment">%合并转置，因为feedforwardnet函数以一列为单个样本</span></span><br><span class="line"></span><br><span class="line">goal = [<span class="built_in">ones</span>(<span class="number">1</span>, <span class="number">9</span>), <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="number">6</span>); <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="number">9</span>), <span class="built_in">ones</span>(<span class="number">1</span>, <span class="number">6</span>)]; <span class="comment">%(1,0)表示为</span></span><br><span class="line"><span class="comment">%Af蠓虫，(0,1)表示Apf蠓虫</span></span><br><span class="line">x_recognize = [<span class="number">1.24</span>, <span class="number">1.80</span>; <span class="number">1.28</span>, <span class="number">1.84</span>; <span class="number">1.40</span>, <span class="number">2.04</span>]&#x27;; <span class="comment">%识别的样本</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(x_1(:, <span class="number">1</span>), x_1(:, <span class="number">2</span>), <span class="string">&#x27;ro&#x27;</span>, <span class="string">&#x27;DisplayName&#x27;</span>, <span class="string">&#x27;Af&#x27;</span>); <span class="comment">%绘制Af的散点图</span></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x_2(:, <span class="number">1</span>), x_2(:, <span class="number">2</span>), <span class="string">&#x27;bo&#x27;</span>, <span class="string">&#x27;DisplayName&#x27;</span>, <span class="string">&#x27;Apf&#x27;</span>); <span class="comment">%绘制Apf的散点图</span></span><br><span class="line"><span class="built_in">plot</span>(x_recognize(<span class="number">1</span>, :), x_recognize(<span class="number">2</span>, :), <span class="string">&#x27;yo&#x27;</span>, <span class="string">&#x27;DisplayName&#x27;</span>, <span class="string">&#x27;识别&#x27;</span> ); <span class="comment">%绘制识别样本的散点图</span></span><br><span class="line">xlabel(<span class="string">&#x27;触角长度&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;翅膀长度&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>;</span><br><span class="line"></span><br><span class="line">net = feedforwardnet([<span class="number">3</span>, <span class="number">2</span>], <span class="string">&#x27;trainlm&#x27;</span>); <span class="comment">%两层隐含层，相应神经元个数分别为3和2，采用L-M优化算法，效果比较好</span></span><br><span class="line">net.trainParam.max_fail = <span class="number">1000</span>; <span class="comment">%连续1000次误差不下降，停止训练</span></span><br><span class="line">net.trainParam.lr = <span class="number">0.05</span>; <span class="comment">%学习速率</span></span><br><span class="line">net.trainParam.epochs = <span class="number">10000</span>; <span class="comment">%最大训练次数</span></span><br><span class="line">net.trainParam.goal = <span class="number">1e-15</span>; <span class="comment">%最小误差，达到该精度，停止训练</span></span><br><span class="line">net.trainParam.show = <span class="number">50</span>; <span class="comment">%每50次展示训练结果</span></span><br><span class="line">net = train(net, x, goal); <span class="comment">%训练</span></span><br><span class="line">y0 = sim(net, x) <span class="comment">%输出</span></span><br><span class="line">perf = perform(net, goal, y0)<span class="comment">%误差</span></span><br><span class="line">ym = sim(net, x_recognize) <span class="comment">%识别</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下图是蠓虫的散点图，可以看出这三个样本还是比较难分类的，肉眼几乎很难判断。利用BP神经网络算法得到的结果有时候也会有比较大的差异，这也很正常，仅通过触角和翅膀长度确实不易分辨。</p>
<p><img src="https://s2.loli.net/2022/05/01/KW4w6ZEHdrvGQXM.png" style="zoom:50%;" /></p>
<p>这是训练误差比较低情况下的一个输出，显示识别样本中第一、第二为Af类型的蠓虫，第三为Apf类型的蠓虫。</p>
<figure>
<img src="https://s2.loli.net/2022/05/01/t1WmHSNoKn6BVRx.png"
alt="image-20210804215106236" />
<figcaption aria-hidden="true">image-20210804215106236</figcaption>
</figure>
<h4 id="参考来源"><strong>3. 参考来源</strong></h4>
<p>[1] <a
href="https://baike.baidu.com/item/BP神经网络/4581827">BP神经网络_百度百科
(baidu.com)</a></p>
<p>[2] <a
href="https://www.cnblogs.com/biaoyu/p/4591304.html#!comments">BP神经网络推导过程详解
- Alex Yu - 博客园 (cnblogs.com)</a><a name="第二种跳转"> </a></p>
<p>[3] <a href="https://www.bilibili.com/video/BV1A4411x76J">专题
通过四个matlab建模案例彻底精通BP神经网络_哔哩哔哩_bilibili</a></p>
<p>[4] <a
href="https://www.bilibili.com/video/BV11K4y1h7MD?from=search&amp;seid=8384977427461027422">最容易听懂的BP神经网络教程----萌新入门首选课_哔哩哔哩_bilibili</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>C++文件操作</title>
    <url>/2022/05/07/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="文件操作">文件操作</h1>
<p>程序运行时产生的数据都属于临时数据，程序一旦结束都会释放</p>
<p>通过文件可以将<strong>数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件<code>&lt;fstream&gt;</code></p>
<p>文件类型分为两种：</p>
<pre><code>1. 文本文件 - 文件以文本的ASCII码形式存储在计算机中
2. 二进制文件 - 文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂他们</code></pre>
<p>操作文件的三大类：</p>
<pre><code>1. ofstream: 写操作
2. ifstream: 读操作
3. fstream: 读写操作</code></pre>
<h2 id="文本文件">1. 文本文件</h2>
<h3 id="写文件">1.1 写文件</h3>
<div class="note primary no-icon"><p><strong>写文件步骤如下:</strong></p>
<ol type="1">
<li>包含头文件 <code>#include &lt;fstream&gt;</code></li>
<li>创建流对象 <code>ofstream ofs;</code></li>
<li>打开文件 `ofs.open("文件路径", 打开方式);</li>
<li>写数据 <code>ofs &lt;&lt; "写入的数据"</code></li>
<li>关闭文件 <code>ofs.close()</code></li>
</ol>
<table>
<thead>
<tr class="header">
<th>打开方式</th>
<th style="text-align: center;">解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ios::in</td>
<td style="text-align: center;">为读文件而打开文件</td>
</tr>
<tr class="even">
<td>ios::out</td>
<td style="text-align: center;">为写文件而打开文件</td>
</tr>
<tr class="odd">
<td>ios::ate</td>
<td style="text-align: center;">初始位置：文件尾</td>
</tr>
<tr class="even">
<td>ios::app</td>
<td style="text-align: center;">追加方式写文件</td>
</tr>
<tr class="odd">
<td>ios::trunc</td>
<td style="text-align: center;">如果文件存在先删除，再创建</td>
</tr>
<tr class="even">
<td>ios::binary</td>
<td style="text-align: center;">二进制方式</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong> 文件打开方式可以配合使用，使用 <code>|</code>
操作符 例如：用二进制方式写文件： <code>ios::binary|ios::in|</code></p>
</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ofstream ofs;</span><br><span class="line">    ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; endl; </span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl; </span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读文件">1.2 读文件</h3>
<div class="note primary no-icon"><p><strong>读文件步骤如下:</strong></p>
<ol type="1">
<li>包含头文件 <code>#include &lt;fstream&gt;</code></li>
<li>创建流对象 <code>ifstream ifs;</code></li>
<li>打开文件 `ifs.open("文件路径", 打开方式);</li>
<li>查看文件是否打开成功</li>
<li>四种方式读取</li>
<li>关闭文件 <code>ifs.close()</code></li>
</ol>
</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line">    <span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;open file failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第一种</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; buf) &#123;</span><br><span class="line">        cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二种</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (ifs.<span class="built_in">getline</span>(buf, <span class="built_in">sizeof</span>(buf))) &#123;</span><br><span class="line">        cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第三种</span></span><br><span class="line">    string buf;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, buf)) &#123;</span><br><span class="line">        cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第四种</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = ifs.<span class="built_in">get</span>()) != EOF) &#123;</span><br><span class="line">        cout &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二进制文件">2. 二进制文件</h2>
<p>以二进制的方式对文件进行读写操作 打开方式要指定为
<code>ios::binary</code></p>
<h3 id="写文件-1">2.1 写文件</h3>
<div class="note primary no-icon"><p>二进制方式写文件主要利用流对象调用成员函数 <code>write</code></p>
<p>函数原型：
<code>ostream&amp; write(const char* buffer, int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间， len
是读写的字节数</p>
</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> _name[<span class="number">64</span>];</span><br><span class="line">    <span class="type">int</span> _age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ofstream ofs;</span><br><span class="line">    ofs.<span class="built_in">open</span>(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary);</span><br><span class="line">    Person p = &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line">    ofs.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;p, <span class="built_in">sizeof</span>(Person));</span><br><span class="line"></span><br><span class="line">    ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读文件-1">2.2 读文件</h3>
<div class="note primary no-icon"><p>二进制方式读文件主要利用流对象调用成员函数 <code>read</code></p>
<p>函数原型：
<code>istream&amp; read(const char* buffer, int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间， len
是读写的字节数</p>
</div>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> _name[<span class="number">64</span>];</span><br><span class="line">    <span class="type">int</span> _age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.<span class="built_in">open</span>(<span class="string">&quot;person.txt&quot;</span>, ios::in);</span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;file open failed!&quot;</span> &lt;&lt; endl; </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Person p;</span><br><span class="line">    ifs.<span class="built_in">read</span>((<span class="type">char</span> *)&amp;p, <span class="built_in">sizeof</span>(Person));</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; p._name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼编码原理及代码实现</title>
    <url>/2022/05/06/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="哈夫曼编码原理及实现">哈夫曼编码原理及实现</h1>
<h4 id="哈夫曼编码应用及原理">1. 哈夫曼编码应用及原理</h4>
<p>      
哈夫曼编码常用来压缩数据，其原理是利用哈夫曼编码将原有的编码总长度进行压缩。一般情况下，编码长度是一致的，这就导致了无论一个字符在该文本文件出现的频率是多少，其编码长度不变。如果我们可以对出现频率较高的字符进行短编码，这样我们就能降低该文件的编码总长度。举个例子，假设我们有如下的文本文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>典型相关分析</title>
    <url>/2022/05/13/%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="典型相关分析">典型相关分析</h1>
<h4 id="算法原理">1. 算法原理</h4>
<h6 id="概述">1.1 概述</h6>
<p><strong>典型相关分析</strong>
主要用于研究两组变量之间的相关关系。典型相关分析的思想是借助主成分分析思想，对每一组变量分别寻找<font color = red>线性组合</font>，使生成的新的综合变量能代表原始变量大部分的信息，同时，与另一组变量生成新的综合变量的相关程度最大，这一组新的综合变量称为第一对配对；同样的方法，第二对配对选取的是与前一对线性组合不相关的线性组合，而这对线性组合本身具有最大的相关系数，如此继续下去，直到两组变量之间的相关性提取完毕。这些选出的线性组合配对称为典型变量，它们之间的相关系数称为<strong>典型相关系数</strong>。</p>
<h5 id="案例分析">1.2 案例分析</h5>
<p>在研究交通运输与经济发展的关系时，可以使用典型相关分析。 <img
src="../../public/images/article_images/dian1.png" />
衡量交通运输变化的记为第一组变量，反应经济发展为第二组变量(两组变量个数不需要相同)：</p>
<table>
<thead>
<tr class="header">
<th>第一组变量</th>
<th>解释</th>
<th>第二组变量</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(x_1\)</span></td>
<td>客运量/万人</td>
<td><span class="math inline">\(y_1\)</span></td>
<td>人均地区生产总值/亿元</td>
</tr>
<tr class="even">
<td><span class="math inline">\(x_2\)</span></td>
<td>货运量/万吨</td>
<td><span class="math inline">\(y_2\)</span></td>
<td>财政总收入/亿元</td>
</tr>
<tr class="odd">
<td><span class="math inline">\(x_3\)</span></td>
<td>通航点/个</td>
<td><span class="math inline">\(y_3\)</span></td>
<td>旅游总收入/亿元</td>
</tr>
<tr class="even">
<td><span class="math inline">\(x_4\)</span></td>
<td>水运量/万吨</td>
<td><span class="math inline">\(y_4\)</span></td>
<td>农村常住居民可支配收入/元</td>
</tr>
</tbody>
</table>
<p>典型相关分析将各组变量进行线性组合： <span class="math display">\[
U= \alpha_1x_1 + \alpha_2x_2 + \alpha_3x_3 + \alpha_4x_4 \\
V = \beta_1y_1 + \beta_2y_2 + \beta_3y_3 + \beta_4y_4
\]</span> 目的是找到使得新产生的综合变量 <span
class="math inline">\(U\)</span> 和 <span
class="math inline">\(V\)</span> 的相关系数最大的线性组合。
为了方便，我们记线性组合系数为： <span class="math display">\[
\alpha&#39; = (\alpha_1, \alpha_2, \alpha_3, \alpha_4) \\
\beta&#39; = (\beta_1, \beta_2, \beta_3, \beta_4)
\]</span> 也就是我们要求的是： <span class="math display">\[
\argmax_{\alpha, \beta} Corr(U,V)
\]</span> 这样就得到使得 <span class="math inline">\(U\)</span> 和 <span
class="math inline">\(V\)</span> 之间相关系数最大的线性组合系数 <span
class="math inline">\(\alpha\)</span> 和 <span
class="math inline">\(\beta\)</span>。
接着我们再寻找新的线性组合使得到的新的综合变量 <span
class="math inline">\(U_1\)</span> 和 <span
class="math inline">\(V_1\)</span> 分别与 <span
class="math inline">\(U\)</span> 和 <span
class="math inline">\(V\)</span> 不相关且它们之间的相关系数最大。
不断重复上述过程，直到无法再找到新的线性组合得到的综合变量使得与以往的综合变量都不相关。<br>
该案例得到的结果如图： <img
src="../../public/images/article_images/dian2.png" /></p>
<p>对该结果的解释为： &gt;  从表 5
可以得出，典型相关系数最大的是第一对典型变量，具有明显的显著性意义，反应了交通运输的线性组合和经济发展的线性组合之间具有很大的相关性。
  在第一对典型变量（<span class="math inline">\(U_1\)</span>和 <span
class="math inline">\(V_1\)</span>）的数学表达式中，<span
class="math inline">\(U_1\)</span>为交通运输的线性组合，该组合中货运量（<span
class="math inline">\(x_2\)</span>）、通航点（<span
class="math inline">\(x_3\)</span>）和水运量（<span
class="math inline">\(x_4\)</span>）的载荷值较大，说明主要受这三个变量的影响；<span
class="math inline">\(V_1\)</span>为 4
个表示经济发展指标的线性组合，其中 4 个变量的载荷值都比较大，说明 <span
class="math inline">\(V_1\)</span> 受到 4 个变量的影响。
  在第二对典型变量的数学表达式中，<span
class="math inline">\(R2=0.981\)</span>，线性组合 <span
class="math inline">\(U_2\)</span>中，客运量（<span
class="math inline">\(x_1\)</span>）的载荷值最大；在线性组合 <span
class="math inline">\(V_2\)</span> 中，旅游收入(<span
class="math inline">\(y_3\)</span>)的载荷值最大，说明客运量对旅游的收入贡献值很大，交通的发展带动了旅游的发展，提高了旅游的收入。
  在第三对典型变量（<span class="math inline">\(U_2\)</span>和 <span
class="math inline">\(V_2\)</span>）的数_学表达式, <span
class="math inline">\(R3=0.941\)</span>，线性组合<span
class="math inline">\(U_3\)</span>中，货运量（<span
class="math inline">\(x_2\)</span>）的载荷值最大，说明<span
class="math inline">\(U_3\)</span>受货运量的影响较大；在线性组合<span
class="math inline">\(V_3\)</span>中，财政总收入（<span
class="math inline">\(y_2\)</span>）的载荷值最大，说明了货运量对财政总收入有很大的影响。
  综上可以看出：地区的发展和交通的发展具有很大的关联度，一个地区想要得到很好的发展，交通的发展是一个重要方面。<br />
##### 1.3 算法分析   假设有一组变量 <span
class="math inline">\(X_1,\dots,X_p\)</span>, 另一组变量 <span
class="math inline">\(Y_1,\dots,Y_q\)</span>。利用主成分分析的思想，也就是求
<span class="math inline">\(\alpha =
(\alpha_1,\cdots,\alpha_p)&#39;\)</span> 和 <span
class="math inline">\(\beta =
(\beta_1,\cdots,\beta_q)\)</span>,使得新的综合变量 <span
class="math display">\[
U = \alpha_1X_1 + \alpha_2X_2 + \cdots + \alpha_pX_p
\]</span> 和 <span class="math display">\[
V = \beta_1Y_1 + \beta_2Y_2 + \cdots + \beta_qY_q
\]</span> 之间有最可能大的相关。</p>
<p>   设 $$</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>12 gdb调试基础指令</title>
    <url>/2022/06/01/12gdb%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<div class="note primary no-icon">
</div>
]]></content>
      <categories>
        <category>Linux系统编程</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>更新yum源</title>
    <url>/2022/06/10/%E6%9B%B4%E6%96%B0yum%E6%BA%90/</url>
    <content><![CDATA[<div class="note info no-icon"><p>在更新yum源的时候，按照网上的教程，出现'404 not found` 的情况,
如下图。
原因是源所在网址已更换，但配置文件里的没有改变，所以无法下载。</p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Errors during downloading metadata <span class="keyword">for</span> repository <span class="string">&#x27;BaseOS&#x27;</span>:</span><br><span class="line">  - Status code: 404 <span class="keyword">for</span> https://mirrors.cloud.tencent.com/centos/1.0/BaseOS/x86_64/os/repodata/repomd.xml (IP: 123.125.9.52)</span><br><span class="line">Error: Failed to download metadata <span class="keyword">for</span> repo <span class="string">&#x27;BaseOS&#x27;</span>: Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried</span><br></pre></td></tr></table></figure>
<h4 id="解决方法"><font color=purplse>解决方法</font></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line"><span class="built_in">mv</span> Centos-Base.repo Centos-Base.repo.bk // 备份原先配置</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos8_base.repo // 使用腾讯镜像</span><br><span class="line">vim Centos-Base.repo </span><br><span class="line">:%s/<span class="variable">$releasever</span>/8/g      </span><br><span class="line">:wq</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<div class="note warning no-icon"><p>把Centos-Base文件中需要加载的repo对应的enable置1</p>
</div>
<h4 id="简单操作">简单操作</h4>
<p><a
href="https://www.cnblogs.com/weiweivip666/p/16259946.html"></a></p>
]]></content>
      <categories>
        <category>遇见问题</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>rpm强制安装</title>
    <url>/2022/06/10/rpm%E5%BC%BA%E5%88%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<div class="note info no-icon"><p>有时候在使用 <code>rpm</code> 进行包安装时, 会提示缺少依赖,,
可通过增加参数 <code>--nodeps --force</code>来强制安装。</p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh package.rpm --nodeps --force</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>遇见问题</category>
      </categories>
      <tags>
        <tag>rpm</tag>
      </tags>
  </entry>
</search>
